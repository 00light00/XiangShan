package core

import chisel3._
import chisel3.util._

trait HasALUOpType {
  val AluOpTypeNum  = 11

  val AluAdd  = "b0000".U
  val AluSll  = "b0001".U
  val AluSlt  = "b0010".U
  val AluSltu = "b0011".U
  val AluXor  = "b0100".U
  val AluSrl  = "b0101".U
  val AluOr   = "b0110".U
  val AluAnd  = "b0111".U
  val AluSub  = "b1000".U
  val AluSra  = "b1101".U
  val AluLui  = "b1111".U
}

trait ALUInstr extends HasDecodeConst {
  val ADDI    = BitPat("b????????????_?????_000_?????_0010011")
  val SLLI    = BitPat("b0000000?????_?????_001_?????_0010011")
  val SLTI    = BitPat("b????????????_?????_010_?????_0010011")
  val SLTIU   = BitPat("b????????????_?????_011_?????_0010011")
  val XORI    = BitPat("b????????????_?????_100_?????_0010011")
  val SRLI    = BitPat("b0000000?????_?????_101_?????_0010011")
  val ORI     = BitPat("b????????????_?????_110_?????_0010011")
  val ANDI    = BitPat("b????????????_?????_111_?????_0010011")
  val SRAI    = BitPat("b0100000?????_?????_101_?????_0010011")

  val ADD     = BitPat("b0000000_?????_?????_000_?????_0110011")
  val SLL     = BitPat("b0000000_?????_?????_001_?????_0110011")
  val SLT     = BitPat("b0000000_?????_?????_010_?????_0110011")
  val SLTU    = BitPat("b0000000_?????_?????_011_?????_0110011")
  val XOR     = BitPat("b0000000_?????_?????_100_?????_0110011")
  val SRL     = BitPat("b0000000_?????_?????_101_?????_0110011")
  val OR      = BitPat("b0000000_?????_?????_110_?????_0110011")
  val AND     = BitPat("b0000000_?????_?????_111_?????_0110011")
  val SUB     = BitPat("b0100000_?????_?????_000_?????_0110011")
  val SRA     = BitPat("b0100000_?????_?????_101_?????_0110011")

  val AUIPC   = BitPat("b????????????????????_?????_0010111")
  val LUI     = BitPat("b????????????????????_?????_0110111")

  val ALUInstrTable = Array(
    ADDI           -> List(InstrI, FuAlu, AluAdd),
    SLLI           -> List(InstrI, FuAlu, AluSll),
    SLTI           -> List(InstrI, FuAlu, AluSlt),
    SLTIU          -> List(InstrI, FuAlu, AluSltu),
    XORI           -> List(InstrI, FuAlu, AluXor),
    SRLI           -> List(InstrI, FuAlu, AluSrl),
    ORI            -> List(InstrI, FuAlu, AluOr ),
    ANDI           -> List(InstrI, FuAlu, AluAnd),
    SRAI           -> List(InstrI, FuAlu, AluSra),

    ADD            -> List(InstrR, FuAlu, AluAdd),
    SLL            -> List(InstrR, FuAlu, AluSll),
    SLT            -> List(InstrR, FuAlu, AluSlt),
    SLTU           -> List(InstrR, FuAlu, AluSltu),
    XOR            -> List(InstrR, FuAlu, AluXor),
    SRL            -> List(InstrR, FuAlu, AluSrl),
    OR             -> List(InstrR, FuAlu, AluOr ),
    AND            -> List(InstrR, FuAlu, AluAnd),
    SUB            -> List(InstrR, FuAlu, AluSub),
    SRA            -> List(InstrR, FuAlu, AluSra),

    AUIPC          -> List(InstrU, FuAlu, AluAdd),
    LUI            -> List(InstrU, FuAlu, AluLui)
  )
}

class ALU extends HasALUOpType {
  def access(src1: UInt, src2: UInt, func: UInt): UInt = {
    val shamt = src2(4, 0)
    LookupTree(func, 0.U, List(
      AluAdd  -> (src1  +  src2),
      AluSll  -> ((src1  << shamt)(31, 0)),
      AluSlt  -> ((src1.asSInt < src2.asSInt).asUInt),
      AluSltu -> ((src1 < src2).asUInt),
      AluXor  -> (src1  ^  src2),
      AluSrl  -> (src1  >> shamt),
      AluOr   -> (src1  |  src2),
      AluAnd  -> (src1  &  src2),
      AluSub  -> (src1  -  src2),
      AluLui  -> src2,
      AluSra  -> ((src1.asSInt >> shamt).asUInt)
    ))
  }
}
